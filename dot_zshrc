# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
#export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="ultima"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

#source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# zoxide (better cd)
eval "$(zoxide init zsh)"

# eza (better ls)
alias ls='eza --color=always --group-directories-first'

# Starship (terminal behavior look?)
eval "$(starship init zsh)"

# Add copilot alias
eval "$(gh copilot alias -- zsh)"

# LLVM to path
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

# NOTE: FZF
# Set up fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git "
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

export FZF_DEFAULT_OPTS="--height 50% --layout=default --border
  --color=fg:#908caa,bg:#191724,hl:#ebbcba
	--color=fg+:#e0def4,bg+:#26233a,hl+:#ebbcba
	--color=border:#403d52,header:#31748f,gutter:#191724
	--color=spinner:#f6c177,info:#9ccfd8
	--color=pointer:#c4a7e7,marker:#eb6f92,prompt:#908caa"

# Setup fzf previews
export FZF_CTRL_T_OPTS="--preview 'bat --color=always -n --line-range :500 {}'"
export FZF_ALT_C_OPTS="--preview 'eza --icons=always --tree --color=always {} | head -200'"

fzf-git-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

alias gco='fzf-git-checkout'
alias gg='lazygit'
alias sudo='sudo '

cmake_fzf() {
  # Set the root directory for your CMake project (update this to your project root)
  local cmake_project_dir="$(pwd)"

  # Paths to the CMakeUserPresets.json and potential CMakePresets.json from includes
  local cmake_user_presets="$cmake_project_dir/CMakeUserPresets.json"

  # Initialize the list of presets
  local configure_presets=""
  local build_presets=""
  local test_presets=""

  # If CMakeUserPresets.json exists, process its include field
  if [[ -f "$cmake_user_presets" ]]; then

    # Parse the CMakeUserPresets.json file to get included preset files
    local included_presets=()
    while IFS= read -r line; do
      included_presets+=("$line")
    done < <(jq -r '.include[]' "$cmake_user_presets")

    # For each included preset, try to load the presets
    for preset_file in "${included_presets[@]}"; do

      # Resolve the full path for the included preset file
      local full_preset_path="$cmake_project_dir/$preset_file"

      # Check if the included file exists
      if [[ -f "$full_preset_path" ]]; then

        # Append the presets from the included file
        configure_presets+=$(jq -r '.configurePresets[]?.name' "$full_preset_path")
        configure_presets+=$'\n'
        build_presets+=$(jq -r '.buildPresets[]?.name' "$full_preset_path")
        build_presets+=$'\n'
        test_presets+=$(jq -r '.testPresets[]?.name' "$full_preset_path")
        test_presets+=$'\n'
      else
        echo "Warning: Included preset file not found: $full_preset_path"
      fi
    done
  fi

  # If no presets found, show an error
  if [[ -z "$configure_presets" && -z "$build_presets" && -z "$test_presets" ]]; then
    echo "No presets found in CMakeUserPresets.json or included files."
    return 1
  fi

  # Determine the action based on the first argument
  local action="$1"
  local selected_preset

  case "$action" in
    "Configure")
      selected_preset=$(echo "$configure_presets" | fzf --prompt="Select a Configure Preset: ")
      if [[ -z "$selected_preset" ]]; then
        echo "No configure preset selected, aborting."
        return 1
      fi
      echo "Running cmake configure with preset: $selected_preset"
      cmake --preset "$selected_preset"
      ;;
    "Build")
      selected_preset=$(echo "$build_presets" | fzf --prompt="Select a Build Preset: ")
      if [[ -z "$selected_preset" ]]; then
        echo "No build preset selected, aborting."
        return 1
      fi
      echo "Running cmake build with preset: $selected_preset"
      cmake --build . --preset "$selected_preset" | xcbeautify
      ;;
    "Test")
      selected_preset=$(echo "$test_presets" | fzf --prompt="Select a Test Preset: ")
      if [[ -z "$selected_preset" ]]; then
        echo "No test preset selected, aborting."
        return 1
      fi
      echo "Running cmake test with preset: $selected_preset"
      ctest --preset "$selected_preset"
      ;;
    *)
      echo "Unknown action: $action. Use 'cmc' for configure, 'cmb' for build, or 'ct' for test."
      return 1
      ;;
  esac
}
# Create aliases for the different actions
alias cmc='cmake_fzf "Configure"'
alias cmb='cmake_fzf "Build"'
alias ct='cmake_fzf "Test"'

conan_fzf() {
  # Check if we're in a directory with a conanfile.py
  if [[ ! -f "conanfile.py" ]]; then
    echo "Error: No conanfile.py found in current directory. Please run this from your project root."
    return 1
  fi

  # Check if BUILDING.md exists
  if [[ ! -f "BUILDING.md" ]]; then
    echo "Error: BUILDING.md not found. Cannot extract project-specific conan profiles."
    return 1
  fi

  # Parse profiles from BUILDING.md
  local profiles
  profiles=$(grep -o "conan install \. -pr [a-zA-Z0-9_-]*" BUILDING.md | sed 's/conan install \. -pr //' | sort -u)

  if [[ -z "$profiles" ]]; then
    echo "Error: No conan profiles found in BUILDING.md."
    return 1
  fi

  # Determine filter based on the first argument
  local filter="$1"
  local filtered_profiles

  case "$filter" in
    "windows"|"win")
      filtered_profiles=$(echo "$profiles" | grep -i "win")
      echo "Showing Windows profiles..."
      ;;
    "macos"|"mac"|"darwin")
      filtered_profiles=$(echo "$profiles" | grep -i "macos")
      echo "Showing macOS profiles..."
      ;;
    "linux")
      filtered_profiles=$(echo "$profiles" | grep -i "rhel\|linux")
      echo "Showing Linux profiles..."
      ;;
    "android")
      filtered_profiles=$(echo "$profiles" | grep -i "android")
      echo "Showing Android profiles..."
      ;;
    "ios")
      filtered_profiles=$(echo "$profiles" | grep -i "ios")
      echo "Showing iOS profiles..."
      ;;
    "debug")
      filtered_profiles=$(echo "$profiles" | grep -i "debug")
      echo "Showing Debug profiles..."
      ;;
    "release")
      filtered_profiles=$(echo "$profiles" | grep -i "release")
      echo "Showing Release profiles..."
      ;;
    "")
      filtered_profiles="$profiles"
      echo "Showing all project profiles..."
      ;;
    *)
      # If not a recognized filter, treat as action for later
      filtered_profiles="$profiles"
      echo "Showing all project profiles..."
      ;;
  esac

  if [[ -z "$filtered_profiles" ]]; then
    echo "No profiles found matching filter: $filter"
    return 1
  fi

  # Add platform labels for better readability
  local labeled_profiles
  labeled_profiles=$(echo "$filtered_profiles" | while read -r profile; do
    if [[ -n "$profile" ]]; then
      case "$profile" in
        *win*)
          echo "🪟 Windows | $profile"
          ;;
        *macos*)
          echo "🍎 macOS   | $profile"
          ;;
        *rhel*|*linux*)
          echo "🐧 Linux   | $profile"
          ;;
        *android*)
          echo "🤖 Android | $profile"
          ;;
        *ios*)
          echo "📱 iOS     | $profile"
          ;;
        *)
          echo "❓ Other   | $profile"
          ;;
      esac
    fi
  done)

  # Use fzf to select a profile - show the full line but extract profile name
  local selected_line
  selected_line=$(echo "$labeled_profiles" | fzf --prompt="Select a Conan Profile: " --height=50%)

  if [[ -z "$selected_line" ]]; then
    echo "No profile selected, aborting."
    return 1
  fi

  # Extract just the profile name (everything after the last pipe and space)
  local selected_profile
  selected_profile=$(echo "$selected_line" | sed 's/.*| *//')

  # Determine action - check if first arg was a filter or action
  local action
  case "$filter" in
    "windows"|"win"|"macos"|"mac"|"darwin"|"linux"|"android"|"ios"|"debug"|"release"|"")
      # First arg was a filter, check for second arg as action
      action="$2"
      ;;
    *)
      # First arg was likely an action
      action="$filter"
      ;;
  esac

  # Create build directory if it doesn't exist
  if [[ ! -d "build" ]]; then
    echo "Creating build directory..."
    mkdir -p build
  fi

  # Run the conan install command
  echo "Executing: conan install . -pr $selected_profile -u"
  conan install . -pr "$selected_profile" -r devhub
}

# Create aliases for different conan install modes
alias ci='conan_fzf'                           # All profiles

# Platform-specific aliases
alias ciw='conan_fzf "windows"'                # Windows profiles only
alias cim='conan_fzf "macos"'                  # macOS profiles only
alias cil='conan_fzf "linux"'                  # Linux profiles only
alias cia='conan_fzf "android"'                # Android profiles only
alias cii='conan_fzf "ios"'                    # iOS profiles only

# Build type aliases
alias cid='conan_fzf "debug"'                  # Debug profiles only
alias cir='conan_fzf "release"'                # Release profiles only
